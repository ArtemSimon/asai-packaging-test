import base64
import csv
from io import StringIO
from odoo import models, fields, api
from odoo.exceptions import UserError
import logging
_logger = logging.getLogger(__name__)

class PackagingOrder(models.Model):
    _name = 'asai.packaging.order'
    _description = 'Packaging Order'

    name = fields.Char('Order Number', required=True)
    packer_name = fields.Char('Packer Name')
    status = fields.Selection([
        ('draft', 'Draft'),
        ('in_progress', 'In Progress'),
        ('done', 'Packed'),
        ('cancelled', 'Cancelled')
    ], default='draft', required=True)

    cancel_cause = fields.Text('Cancel Cause') # –¥–ª—è —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ 

    scan_code = fields.Char(
        "Scan QR Code",
        help="–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–µ—Ç–∞–ª–∏ ‚Äî —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏—Ç —Å—á—ë—Ç—á–∏–∫"
    )

    detail_ids = fields.One2many(
        'asai.packaging.detail',
        'order_id',
        string='Packaging Detail'
    )

    # –ö–Ω–æ–ø–∫–∞: –ù–∞—á–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É
    def action_start(self):
        self.write({'status': 'in_progress'})

    # –ö–Ω–æ–ø–∫–∞: –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–ø–∞–∫–æ–≤–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å—ë —É–ø–∞–∫–æ–≤–∞–Ω–æ)
    def action_done(self):
        if self._is_complete():
            self.write({'status': 'done'})
        else:
            raise ValueError("Cannot complete: not all items are packed!")

    # –ö–Ω–æ–ø–∫–∞: –°–±—Ä–æ—Å–∏—Ç—å
    def action_reset(self):
        self.write({'status': 'draft'})
        self.detail_ids.write({'qty_packed': 0})

    # –ö–Ω–æ–ø–∫–∞: –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
    def action_cancel(self):
        self.write({'status': 'cancelled'})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ª–∏ –¥–µ—Ç–∞–ª–∏ —É–ø–∞–∫–æ–≤–∞–Ω—ã?
    @api.depends('detail_ids.qty_packed', 'detail_ids.qty_required')
    def _compute_is_complete(self):
        for order in self:
            order.is_complete = order._is_complete()

    is_complete = fields.Boolean(compute='_compute_is_complete', store=True)

    def _is_complete(self):
        return all(
            line.qty_packed >= line.qty_required
            for line in self.detail_ids
        )
    
    @api.model
    def action_import_csv(self):
        """–í–æ—â—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Wizard"""
        return {
            'name': 'Import Production Order from Csv',
            'type': 'ir.actions.act_window',
            'res_model': 'asai.packaging.import',
            'view_mode': 'form',
            'target': 'new',
            'view_id': False,
        }

    def action_open_cancel(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç Wizard –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
        self.ensure_one()
        return {
            'name': 'Cancel Packaging Order',
            'type': 'ir.actions.act_window',
            'res_model': 'asai.packaging.cancel',
            'view_mode': 'form',
            'target': 'new',
            'context': {
                'default_order_id': self.id
            }
        }

    def action_scan_code(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∞ QR Code"""
        self.ensure_one()

        _logger.info("‚úÖ action_scan_code –≤—ã–∑–≤–∞–Ω")  # üîç
        _logger.info("Scan code: %s", self.scan_code)  # üîç

        _logger.info("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ detail_ids: %s", len(self.detail_ids))
        _logger.info("–°–∞–º–∏ –¥–µ—Ç–∞–ª–∏: %s", self.detail_ids.ids)

        if not self.scan_code:
            _logger.warning("‚ùå scan_code –ø—É—Å—Ç–æ–π")  # üîç
            return
        
        detail = self.detail_ids.filtered(lambda d:d.qr_code == self.scan_code)

        if not detail:
            raise UserError(f'–î–µ—Ç–∞–ª—å —Å QR-–∫–æ–¥–æ–º {self.scan_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        
        available_detail = detail.qty_required - detail.qty_packed
        if available_detail <= 0:
            raise UserError(
                f'–ù–µ–ª—å–∑—è —É–ø–∞–∫–æ–≤–∞—Ç—å {detail.qty_scan_add} —à—Ç. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {available_detail}'
            )
         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç
        if detail.qty_scan_add > available_detail:
            raise UserError(
                f'–ù–µ–ª—å–∑—è —É–ø–∞–∫–æ–≤–∞—Ç—å {detail.qty_scan_add} —à—Ç. '
                f'–ú–∞–∫—Å–∏–º—É–º ‚Äî {available_detail} —à—Ç.'
        )

        detail.qty_packed += detail.qty_scan_add
        detail.write({'qty_packed': detail.qty_packed})  # —è–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        
        self.scan_code = False

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É–ø–∞–∫–æ–≤–∫–µ
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': '–£–ø–∞–∫–æ–≤–∫–∞',
                'message': f"{detail.product_name}: +{detail.qty_scan_add} —à—Ç. —É–ø–∞–∫–æ–≤–∞–Ω–æ.",
                'type': 'success',
                'sticky': False,
            }
        }
        # }, {
        #     'type': 'ir.actions.client',
        #     'tag': 'refresh'
        # }

    
#     def action_csv_load(self):
#         self.ensure_one()
#         if not self.csv_file or not self.csv_filename:
#             raise UserError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª.")
        
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ 
#         if not self.csv_filename.endswith('.csv'):
#             raise UserError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV-—Ñ–∞–π–ª—ã.")
        
#         # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
#         try:
#             details_order = base64.b64decode(self.csv_file).decode('utf-8')
#             file_load = StringIO(details_order)
#             reader = csv.DictReader(file_load)
#         except Exception as e:
#             raise UserError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV-—Ñ–∞–π–ª–∞ {str(e)}")
        

#         lines = []
#         for row in reader:
#             lines.append((0,0, {
#                 "product_name": row.get('product_name', '').strip(),
#                 "dimensions": row.get('dimensions', '').strip(),
#                 "qty_required": float(row.get('qty_required',1)),
#                 "qr_code": row.get('qr_code', '').strip(),
#                 "qty_scan_add": float(row.get('qty_scan_add', 1)),
#         }))
        
        
#         # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
#         self.detail_ids.unlink()
#         self.write({"detail_ids": lines})

#         # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å 
#         self.status = "in_progress"


#         return {
#             'type': 'ir.actions.client',
#             'tag': 'display_notification',
#             'params': {
#                 'title': 'Success',
#                 'message': f'Imported {len(lines)} items from CSV.', 
#                 'type': 'success',
#                 'sticky': False,                            
#             }
#         },{
#     'type': 'ir.actions.client',
#     'tag': 'refresh'
# }
