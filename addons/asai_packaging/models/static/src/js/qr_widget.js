// import { rpc } from "@web/core/network/rpc";/

odoo.define('asai_packaging.QRScannerWidget', [], function (require) {
    'use strict';

    const { registry } = require('@web/core/registry');
    const { Component } = owl;
    // const { ormService } = require('@web/core/orm_service');

    const { useService } = require('@web/core/utils/hooks'); 

    class QRScannerWidget extends Component {
        setup() {
            this.inputRef = owl.useRef('input');
            this.orm = useService('orm'); 
        }

        // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
        async onChange() {
            const value = this.inputRef.el.value;
            if (!value) return;
                    
            console.log("onChange –≤—ã–∑–≤–∞–Ω", value); // üîç
            console.log("Record ID:", this.props.record.data.id); // üîç
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
            // const recordId = this.props.record.data.id;

            console.log("–î–æ update:", this.props.record.data.scan_code);
            this.props.record.update({ scan_code: value });
            console.log("–ü–æ—Å–ª–µ update:", this.props.record.data.scan_code);
            
            try {
                // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ ormService
                const result = await this.orm.call(
                    'asai.packaging.order',   // –º–æ–¥–µ–ª—å
                    'action_scan_code',       // –º–µ—Ç–æ–¥
                    [
                        [this.props.record.data.id],
                        value
                    
                    ],             // args
                    {}                        // kwargs
                );
                console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:", result); // üîç
            // // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º RPC-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            // const result = await rpc({
            //     model: 'asai.packaging.order',
            //     method: 'action_scan_code',
            //     args: [],
            //     // args: [this.props.record.data.id],
            //     // kwargs: { scan_code: value },
            // });

            
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (result && result.type === 'ir.actions.client') {
                        this.env.services.notification.add(
                            result.params.message,
                            { type: result.params.type }
                        );
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
                    // this.props.record.model.root.reload();
                await this.props.record.model.load();

            } catch (error) {
                // –ü–æ–∫–∞–∂–µ–º –æ—à–∏–±–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, UserError)
                console.error("–û—à–∏–±–∫–∞ RPC:", error); // üîç
                this.env.services.notification.add(
                    error.message,
                    { type: 'danger' }
                );
            }
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            this.inputRef.el.value = '';
        }
    }

    QRScannerWidget.template = 'asai_packaging.QRScannerWidget';
    QRScannerWidget.props = ['record', 'field', 'widget'];

    registry.category('fields').add('qr_scanner',{
        component: QRScannerWidget
    });

    return QRScannerWidget; 

});